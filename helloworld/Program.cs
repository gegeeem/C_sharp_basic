// See https://aka.ms/new-console-template for more information
Console.WriteLine("Hello, World! I'm here!");

string firstFriend = "Maria";
string secondFriend = "Scott";

Console.WriteLine($"My friends are {firstFriend} and {secondFriend}");

Console.WriteLine("My friend is "+firstFriend+" and "+secondFriend);


//Trim() method
string greeting = "      Hello World!       ";
Console.WriteLine($"[{greeting}]");

string trimmedGreeting = greeting.TrimStart();
Console.WriteLine($"[{trimmedGreeting}]");

trimmedGreeting = greeting.TrimEnd();
Console.WriteLine($"[{trimmedGreeting}]");

trimmedGreeting = greeting.Trim();
Console.WriteLine($"[{trimmedGreeting}]");


/*A string is an object of type String whose value is text. 
Internally, the text is stored as a sequential read-only collection of Char objects. 
There's no null-terminating character at the end of a C# string; 
therefore a C# string can contain any number of embedded null characters ('\0'). 
The Length property of a string represents the number of Char objects it contains, 
not the number of Unicode characters. 
To access the individual Unicode code points in a string, use the StringInfo object.*/

Console.WriteLine("Please, give me 7th character of string declared as greeting: "+greeting[6]);
Console.WriteLine("greetingLength: "+greeting.Length);

// null and empty string are diff

string iAmEmpty = "";
// the next initialisation, will be problem for complier: string iAmNull = null;
string? iAmNull = null;
 
 if (iAmEmpty == iAmNull){
    Console.WriteLine("iAmEmpty == iAmNull true");
 }else{
    Console.WriteLine("iAmEmpty == iAmNull are not equal");
 }

 /*Declaring and initializing strings in various way*/

 System.String typeOfStrDec1 = "Yes I'am string generated by System.String";
 string typeOfStrDec2 = new string("Yes I'am string generated by new string()");

 char[] letters = { 'A', 'B', 'C' };
string alphabet = new string(letters);  /* You don't use the new operator to create a string object except when initializing the string with an array of chars.*/
string alphabet2 = new(letters);

Console.WriteLine(typeOfStrDec1);
Console.WriteLine(typeOfStrDec2);
Console.WriteLine(alphabet);
Console.WriteLine(alphabet2);


//Immutability of strings
/*String objects are immutable: they can't be changed after they've been created. 
All of the String methods and C# operators that appear to modify
 a string actually return the results in a new string object.*/

 string s1 = "A string is more ";
 string s2 = "than the sum of its chars";
 s1 += s2;
 Console.WriteLine(s1);
 string s3 = "a";
 string s4 = s3;
 string s5 = "a";
 Console.WriteLine("is s3 equal s4:"+Object.ReferenceEquals(s3,s4));
  Console.WriteLine("is s3 equal s5:"+Object.ReferenceEquals(s3,s5));
  s5 = "c";
  s5 = "a";
   Console.WriteLine("is s3 equal s5 after s5 = c: "+Object.ReferenceEquals(s3,s5));

